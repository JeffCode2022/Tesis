# üê≥ NIVEL 1: Docker Compose para Desarrollo y Producci√≥n
version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: cardiovascular_db
      POSTGRES_USER: cardiovascular_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-cardiovascular_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cardiovascular_user -d cardiovascular_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Django Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://cardiovascular_user:${DB_PASSWORD:-cardiovascular_pass}@db:5432/cardiovascular_db
      - REDIS_URL=redis://redis:6379/1
      - DJANGO_SETTINGS_MODULE=cardiovascular_project.settings
      - ALLOWED_HOSTS=localhost,127.0.0.1,api.cardioprediction.com
    volumes:
      - ./media:/app/media
      - ./logs:/app/logs
      - static_volume:/app/staticfiles
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Celery Worker
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A config worker -l info --concurrency=4
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://cardiovascular_user:${DB_PASSWORD:-cardiovascular_pass}@db:5432/cardiovascular_db
      - REDIS_URL=redis://redis:6379/1
      - DJANGO_SETTINGS_MODULE=cardiovascular_project.settings
    volumes:
      - ./media:/app/media
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    restart: unless-stopped

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A config beat -l info
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://cardiovascular_user:${DB_PASSWORD:-cardiovascular_pass}@db:5432/cardiovascular_db
      - REDIS_URL=redis://redis:6379/1
      - DJANGO_SETTINGS_MODULE=cardiovascular_project.settings
    volumes:
      - ./media:/app/media
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/staticfiles
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - web
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  static_volume:
  prometheus_data:
  grafana_data:
